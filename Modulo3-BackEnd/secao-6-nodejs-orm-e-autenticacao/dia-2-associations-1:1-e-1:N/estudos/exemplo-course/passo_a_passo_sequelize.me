// Criando a pasta do projeto
  mkdir app-with-sequelize && cd app-with-sequelize

// Iniciando uma aplicação node.js
  npm init -y

// Instalando a biblioteca ORM - Sequelize
  npm install -E sequelize@6.3.4

// Crie .gitignore e inclua node_modules

// Crie .env
  MYSQL_USER=root
  MYSQL_PASSWORD=password
  MYSQL_DATABASE=orm_example
  MYSQL_HOST=localhost

// Instalar p CLI e o mysql12 (só deu certo rodando juntos)
  npm install -D -E sequelize-cli@6.2.0
  npm install -E mysql2@2.1.0
  mkdir src

// Entre no SRC
  cd src

// Inicialize Sequelize 
  npx sequelize-cli init

** Se o sequelize-cli não instalar com os comando acima, instale-o localmente:
  npm install -g sequelize-cli@6.2.0

// Crie .sequelizerc na raiz do projeto
  const path = require('path');

  module.exports = {
  'config': path.resolve('src', 'config', 'config.js'),
  'models-path': path.resolve('src', 'models'),
  'seeders-path': path.resolve('src', 'seeders'),
  'migrations-path': path.resolve('src', 'migrations'),
  };

// Configure banco de dados
  Troque o config-> config.json para config.js 
  Inclua:
    // src/config/config.js

    const config = {
    username: process.env.MYSQL_USER,
    password: process.env.MYSQL_PASSWORD,
    database: process.env.MYSQL_DATABASE,
    host: process.env.MYSQL_HOST,
    dialect: 'mysql',
    };

    module.exports = {
    development: config,
    test: config,
    production: config,
    };

// Mude src/models/index.js para config.js
  Geralmente linha 8:
  const config = require(__dirname + '/../config/config.js')[env];

// Garanta que o container do mysql esteja rodando
  docker ps / docker start container

// Crie o banco de dados
  env $(cat .env) npx sequelize db:create

// Verifique se criou no Workbench

// Criando migration employees e alterando
  npx sequelize migration:generate --name create-employees
    // src/migrations/[timestamp]-create-employee.js

    module.exports = {
      up: async (queryInterface, Sequelize) => {
        return queryInterface.createTable('employees', {
          id: {
            allowNull: false,
            autoIncrement: true,
            primaryKey: true,
            type: Sequelize.INTEGER,
          },
          firstName: {
            allowNull: false,
            type: Sequelize.STRING,
            field: 'first_name',
          },
          lastName: {
            allowNull: false,
            type: Sequelize.STRING,
            field: 'last_name',
          },
          age: {
            allowNull: false,
            type: Sequelize.INTEGER,
          },
        });
      },

      down: async (queryInterface, _Sequelize) => {
        return queryInterface.dropTable('employees');
      },
    };

// Criando migration address e alterando
  npx sequelize migration:generate --name create-addresses

  // src/migrations/[timestamp]-create-addresses.js

    module.exports = {
      up: async (queryInterface, Sequelize) => {
        return queryInterface.createTable('addresses', {
          id: {
            allowNull: false,
            autoIncrement: true,
            primaryKey: true,
            type: Sequelize.INTEGER,
          },
          city: {
            allowNull: false,
            type: Sequelize.STRING,
          },
          street: {
            allowNull: false,
            type: Sequelize.STRING,
          },
          number: {
            allowNull: false,
            type: Sequelize.INTEGER,
          },
          employeeId: {
            type: Sequelize.INTEGER,
            allowNull: false,
            // Configuram o que deve acontecer ao atualizar ou excluir um usuário
            onUpdate: 'CASCADE',
            onDelete: 'CASCADE',
            field: 'employee_id',
            // Informa que o campo é uma Foreign Key (Chave estrangeira)
            references: {
              // Informa a tabela da referência da associação
              model: 'employees',
              // Informa a coluna da referência que é a chave correspondente
              key: 'id',
            },
          },
        });
      },

      down: async (queryInterface, _Sequelize) => {
        return queryInterface.dropTable('addresses');
      },
    };

// Gerando as migrations
  env $(cat .env) npx sequelize db:migrate

// Na models crie o arquivo employee.model.js
  mkdir employee.model.js

// Coloque na model employee
  // src/models/employee.model.js

    module.exports = (sequelize, DataTypes) => {
      const Employee = sequelize.define('Employee', {
        id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
        firstName: DataTypes.STRING,
        lastName: DataTypes.STRING,
        age: DataTypes.INTEGER,
      },
      {
        timestamps: false, // remove a obrigatoriedade de utilizar os campos `createdAt` e `updatedAt`
        tableName: 'employees',
        underscored: true,
      });

      Employee.associate = (models) => {
        Employee.hasOne(models.Address,
          { foreignKey: 'employeeId', as: 'addresses' });
      };

      return Employee;
    };

// Na models crie o arquivo address.model.js
  mkdir employee.model.js

// Coloque no address.model.js
    // src/models/address.model.js

    module.exports = (sequelize, DataTypes) => {
      const Address = sequelize.define('Address', {
        id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
        city: DataTypes.STRING,
        street: DataTypes.STRING,
        number: DataTypes.INTEGER,
        employeeId: { type: DataTypes.INTEGER, foreignKey: true },
        // A declaração da Foreign Key é opcional no model
      },
      {
        timestamps: false,
        tableName: 'addresses',
        underscored: true,
      });

      Address.associate = (models) => {
    // define o tipo de relacionamento
        Address.belongsTo(models.Employee,
        // define qual a foreign key a ser criada
          { foreignKey: 'employeeId', as: 'employees' });
      };

      return Address;
    };

